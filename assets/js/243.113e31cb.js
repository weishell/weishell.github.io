(window.webpackJsonp=window.webpackJsonp||[]).push([[243],{646:function(t,T,s){"use strict";s.r(T);var a=s(16),r=Object(a.a)({},(function(){var t=this,T=t._self._c;return T("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[T("h2",{attrs:{id:"https"}},[T("a",{staticClass:"header-anchor",attrs:{href:"#https"}},[t._v("#")]),t._v(" https")]),t._v(" "),T("img",{attrs:{src:"/beifen/019.jpg"}}),t._v(" "),T("h2",{attrs:{id:"http2"}},[T("a",{staticClass:"header-anchor",attrs:{href:"#http2"}},[t._v("#")]),t._v(" http2")]),t._v(" "),T("ol",[T("li",[t._v("信道复用")]),t._v(" "),T("li",[t._v("分帧传输")]),t._v(" "),T("li",[t._v("server push")])]),t._v(" "),T("h3",{attrs:{id:"http1-1-和-http2"}},[T("a",{staticClass:"header-anchor",attrs:{href:"#http1-1-和-http2"}},[t._v("#")]),t._v(" http1.1 和 http2")]),t._v(" "),T("p",[t._v("从传输方式和效率上看，HTTP/1.1采用报文形式传输，而HTTP/2则采用二进制格式传输数据。这种二进制传输方式使得HTTP/2具有更高的解析效率和更少的传输开销。此外，HTTP/1.1如果想并发多个请求，必须使用多个TCP链接，这会导致一定的延时和内存消耗。而在HTTP/2中，由于采用了二进制分帧技术，同域名下所有通信都在单个连接上完成，单个连接可以承载任意数量的双向数据流。这使得HTTP/2能够并行交错地发送多个请求和响应，提高了网络吞吐量和效率。")]),t._v(" "),T("p",[t._v("其次，在协议细节上，HTTP/2使用了HPACK算法对HTTP头部进行压缩，减少了头部传输的数据量，从而进一步减少了网络延迟。同时，HTTP/2还支持服务器推送，允许服务器在客户端请求之前推送资源，提高了性能。")]),t._v(" "),T("p",[t._v("最后，HTTP/2与HTTP/1.1的兼容性也是两者之间的一个重要区别。HTTP/2可以与HTTP/1.1共存，服务器可以同时支持HTTP/1.1和HTTP/2。如果客户端不支持HTTP/2，服务器可以回退到HTTP/1.1。")]),t._v(" "),T("p",[t._v("总的来说，HTTP/2在多个方面对HTTP/1.1进行了改进和优化，提供了更高的效率、更低的延迟和更好的兼容性。这使得HTTP/2成为现代Web应用中更受欢迎的选择。")])])}),[],!1,null,null,null);T.default=r.exports}}]);