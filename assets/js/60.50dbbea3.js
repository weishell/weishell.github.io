(window.webpackJsonp=window.webpackJsonp||[]).push([[60],{457:function(t,s,a){"use strict";a.r(s);var n=a(12),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"eval-函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#eval-函数"}},[t._v("#")]),t._v(" eval()函数")]),t._v(" "),a("p",[t._v("eval() 函数可计算某个字符串，并执行其中的代码。\n"),a("em",[a("strong",[t._v("它的功能是把对应的字符串解析成JS代码并运行")])]),t._v("；\n应该避免使用eval，不安全，非常耗性能（2次，一次解析成js语句，一次执行）。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("eval")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//string 必需。要计算的字符串，其中含有要计算的 JavaScript 表达式或要执行的语句。")]),t._v("\n")])])]),a("p",[t._v("返回值: 通过计算 string 得到的值（如果有的话）。")]),t._v(" "),a("p",[a("code",[t._v("欺骗词法作用域会导致性能下降。")]),t._v("\neval(..) 函数可以接受一个字符串为参数，可以在写的代码中用程序生成代码并运行，就好像代码是写在那个位置的一样。")]),t._v(" "),a("p",[t._v("在执行 eval(..) 之后的代码时，引擎并不“知道”或“在意”前面的代码是以动态形式插入进来，并对词法作用域的环境进行修改的。引擎只会如往常地进行词法作用域查找。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" a")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("eval")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 欺骗！")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"var b = 3;"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1, 3")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//在严格模式下， eval(..) 在运行时有其自己的词法作用域，意味着其")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//的声明无法修改所在的作用域。")]),t._v("\n")])])]),a("p",[t._v('eval(..) 调用中的 "var b = 3;" 这段代码会被当作本来就在那里一样来处理。由于那段代码声明了一个新的变量 b ，因此它对已经存在的 foo(..) 的词法作用域进行了修改。')]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("警告")]),t._v(" "),a("p",[t._v("JS中还有其他一些效果 eval()相似。setTimeout(..)和setInterval(..)的第一个参数可以是字符串，字符串的内容可以被解释为一段动态生成的函数代码。这些功能已经过时且并不被提倡。")])]),t._v(" "),a("h3",{attrs:{id:"解析json对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解析json对象"}},[t._v("#")]),t._v(" 解析json对象")]),t._v(" "),a("p",[t._v("json字符串转化为json对象？\n使用eval()这个内置函数，该方式也适合以普通js方式获取json对象。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" dataObj"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("eval")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"("')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('")"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h4",{attrs:{id:"为什么eval这里要添加-data"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么eval这里要添加-data"}},[t._v("#")]),t._v(' 为什么eval这里要添加("("+data+")") ?')]),t._v(" "),a("p",[t._v("由于json是以{ }的方式来开始以及结束的，在eval中会被当成一个语句块来处理，故必须强制将它转换成一种表达式。\n加上圆括号是使eval函数在处理时强制将括号内的表达式(expression)转化为对象而不作为语句(statement)来执行。\n若不加外层的括号，eval会将大括号识别为js代码块的开始和结束标记，{ }将会被认为执行了一句空语句。")]),t._v(" "),a("p",[a("RouterLink",{attrs:{to:"/basic/002scope.html#欺骗词法-eval-with"}},[t._v("eval与作用域")])],1)])}),[],!1,null,null,null);s.default=e.exports}}]);